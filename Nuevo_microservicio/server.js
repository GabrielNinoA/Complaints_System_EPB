require('dotenv').config();
const express = require('express');
const database = require('./src/config/database');
const authRoutes = require('./src/routes/authRoutes');
const { errorHandler, notFoundHandler } = require('./src/middleware/errorHandler');

const app = express();
const PORT = process.env.AUTH_SERVICE_PORT || 3001;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Logging de peticiones
app.use((req, res, next) => {
    console.log(`üìù ${req.method} ${req.path} - ${new Date().toISOString()}`);
    next();
});

// Rutas
app.use('/auth', authRoutes);

// Ruta ra√≠z
app.get('/', (req, res) => {
    res.json({
        service: 'Authentication Microservice',
        version: '1.0.0',
        status: 'running',
        timestamp: new Date().toISOString()
    });
});

// Middleware de errores
app.use(notFoundHandler);
app.use(errorHandler);

// Iniciar servidor
const startServer = async () => {
    try {
        // Probar conexi√≥n a base de datos
        const isConnected = await database.testConnection();
        
        if (!isConnected) {
            console.error('‚ùå No se pudo conectar a la base de datos. Abortando inicio del servidor.');
            process.exit(1);
        }

        // Iniciar servidor
        app.listen(PORT, () => {
            console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
            console.log('‚ïë   üîê AUTH MICROSERVICE - SISTEMA QUEJAS EPB   ‚ïë');
            console.log('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
            console.log(`‚ïë   üöÄ Servidor corriendo en puerto: ${PORT}        ‚ïë`);
            console.log(`‚ïë   üåç Entorno: ${process.env.NODE_ENV || 'development'}              ‚ïë`);
            console.log(`‚ïë   üìÖ Fecha: ${new Date().toLocaleString('es-CO')}    ‚ïë`);
            console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
        });
    } catch (error) {
        console.error('‚ùå Error iniciando servidor:', error.message);
        process.exit(1);
    }
};

// Manejo de cierre graceful
process.on('SIGTERM', async () => {
    console.log('‚ö†Ô∏è  SIGTERM recibido. Cerrando servidor...');
    await database.closePool();
    process.exit(0);
});

process.on('SIGINT', async () => {
    console.log('‚ö†Ô∏è  SIGINT recibido. Cerrando servidor...');
    await database.closePool();
    process.exit(0);
});

// Iniciar servidor
startServer();

module.exports = app;
