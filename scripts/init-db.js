#!/usr/bin/env node

/**
 * Script para inicializar la base de datos
 * Ejecuta: node scripts/init-db.js
 */

require('dotenv').config();
const dbService = require('../src/services/database');

async function initializeDatabase() {
    console.log('üöÄ Iniciando configuraci√≥n de base de datos...\n');

    try {
        // Inicializar conexi√≥n
        console.log('üì° Conectando a la base de datos...');
        await dbService.initialize();

        // Verificar health
        console.log('üîç Verificando estado de la base de datos...');
        const isHealthy = await dbService.healthCheck();
        
        if (!isHealthy) {
            throw new Error('La base de datos no est√° respondiendo correctamente');
        }

        // Obtener informaci√≥n de conexi√≥n
        const connectionInfo = await dbService.getConnectionInfo();
        console.log('‚úÖ Conexi√≥n establecida exitosamente:');
        console.log(`   üìä Base de datos: ${connectionInfo.current_database}`);
        console.log(`   üë§ Usuario: ${connectionInfo.db_user}`);
        console.log(`   üî¢ Versi√≥n MySQL: ${connectionInfo.mysql_version}`);
        console.log(`   ‚è∞ Hora del servidor: ${connectionInfo.server_time}\n`);

        // Verificar tablas existentes
        console.log('üîç Verificando estructura de tablas...');
        
        const entidades = await dbService.getAllEntidades();
        const totalQuejas = await dbService.getQuejasCount();
        
        console.log(`‚úÖ Tabla 'entidades': ${entidades.length} registros`);
        console.log(`‚úÖ Tabla 'quejas': ${totalQuejas} registros\n`);

        // Mostrar entidades disponibles
        if (entidades.length > 0) {
            console.log('üìã Entidades disponibles:');
            entidades.forEach((entidad, index) => {
                console.log(`   ${index + 1}. ${entidad.nombre} (ID: ${entidad.id})`);
            });
        } else {
            console.log('‚ö†Ô∏è  No hay entidades cargadas. Ejecuta el script database-setup.sql');
        }

        console.log('\nüéâ Inicializaci√≥n completada exitosamente!');
        console.log('üåê El servidor est√° listo para recibir requests\n');

    } catch (error) {
        console.error('‚ùå Error durante la inicializaci√≥n:');
        console.error(`   Mensaje: ${error.message}`);
        console.error(`   C√≥digo: ${error.code || 'N/A'}\n`);

        // Sugerencias seg√∫n el tipo de error
        if (error.code === 'ECONNREFUSED') {
            console.log('üí° Sugerencias:');
            console.log('   - Verifica que las credenciales en .env sean correctas');
            console.log('   - Aseg√∫rate de tener conexi√≥n a internet');
            console.log('   - Verifica que Clever Cloud est√© disponible');
        } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
            console.log('üí° Sugerencias:');
            console.log('   - Verifica el usuario y contrase√±a en .env');
            console.log('   - Aseg√∫rate de tener permisos en la base de datos');
        } else if (error.code === 'ER_BAD_DB_ERROR') {
            console.log('üí° Sugerencias:');
            console.log('   - Verifica que el nombre de la base de datos sea correcto');
            console.log('   - Ejecuta el script database-setup.sql primero');
        }

        process.exit(1);
    } finally {
        // Cerrar conexi√≥n
        await dbService.close();
    }
}

// Ejecutar solo si se llama directamente
if (require.main === module) {
    initializeDatabase();
}

module.exports = { initializeDatabase };
